#!/bin/env python
# -*- coding: utf-8 -*-
import sys
import os
import codecs
import glob
import configparser
import pandas as pd
from jinja2 import Environment, FileSystemLoader
from util import Utilty

# Type of printing.
OK = 'ok'         # [*]
NOTE = 'note'     # [+]
FAIL = 'fail'     # [-]
WARNING = 'warn'  # [!]
NONE = 'none'     # No label.


# Create report.
class CreateReport:
    def __init__(self):
        self.util = Utilty()

        # Read config file.
        full_path = os.path.dirname(os.path.abspath(__file__))
        config = configparser.ConfigParser()
        try:
            config.read(os.path.join(full_path, 'config.ini'))
        except Exception as err:
            self.util.print_exception(err, 'File exists error')
            sys.exit(1)

        self.report_path = os.path.join(full_path, config['Report']['report_path'])
        self.report_file = os.path.join(self.report_path, config['Report']['report_file'])
        self.template_file = config['Report']['template_file']
        self.header = str(config['Report']['header']).split('@')

    def create_report(self):
        self.util.print_message(NOTE, 'Creating report.')

        # Gather reporting items.
        csv_file_list = glob.glob(os.path.join(self.report_path, '*.csv'))

        # Create DataFrame.
        content_list = []
        for file in csv_file_list:
            content_list.append(pd.read_csv(file, names=self.header, sep=','))
        df_csv = pd.concat(content_list).drop_duplicates().sort_values(by=['ip', 'port'],
                                                                       ascending=True).reset_index(drop=True,
                                                                                                   col_level=1)

        items = []
        for idx in range(len(df_csv)):
            items.append({'ip_addr': df_csv.loc[idx, 'ip'],
                          'port': df_csv.loc[idx, 'port'],
                          'prod_name': df_csv.loc[idx, 'service'],
                          'vuln_name': df_csv.loc[idx, 'vuln_name'],
                          'type': df_csv.loc[idx, 'type'],
                          'description': df_csv.loc[idx, 'description'],
                          'exploit': df_csv.loc[idx, 'exploit'],
                          'target': df_csv.loc[idx, 'target'],
                          'payload': df_csv.loc[idx, 'payload'],
                          'ref': str(df_csv.loc[idx, 'reference']).replace('@', '<br>')})

        try:
            # Setting template.
            env = Environment(loader=FileSystemLoader(self.report_path))
            template = env.get_template(self.template_file)
            pd.set_option('display.max_colwidth', -1)
            html = template.render({'title': 'Deep Exploit Scan Report', 'items': items})
            # Write report.
            with codecs.open(self.report_file, 'w', 'utf-8') as fout:
                fout.write(html)
        except Exception as err:
            self.util.print_exception(err, 'Creating report error.')
        self.util.print_message(OK, 'Created report.')


if __name__ == '__main__':
    report = CreateReport()
    report.create_report()
    print('Finish!!')
