#!/bin/env python
# -*- coding: utf-8 -*-
import sys
import os
import codecs
import glob
import configparser
import pandas as pd
from docopt import docopt
from jinja2 import Environment, FileSystemLoader
from util import Utilty

# Type of printing.
OK = 'ok'         # [*]
NOTE = 'note'     # [+]
FAIL = 'fail'     # [-]
WARNING = 'warn'  # [!]
NONE = 'none'     # No label.


# Create report.
class CreateReport:
    def __init__(self):
        self.util = Utilty()

        # Read config file.
        full_path = os.path.dirname(os.path.abspath(__file__))
        config = configparser.ConfigParser()
        try:
            config.read(os.path.join(full_path, 'config.ini'))
        except Exception as err:
            self.util.print_exception(err, 'File exists error')
            sys.exit(1)

        self.report_test_path = os.path.join(full_path, config['Report']['report_test'])
        self.report_test_file = os.path.join(self.report_test_path, config['Report']['report_test_file'])
        self.template_test = config['Report']['template_test']
        self.report_train_path = os.path.join(self.report_test_path, config['Report']['report_train'])
        self.report_train_file = os.path.join(self.report_train_path, config['Report']['report_train_file'])
        self.template_train = config['Report']['template_train']
        self.header = str(config['Report']['header']).split('@')

    def create_report(self, mode='train'):
        # Check mode.
        if mode not in ['train', 'test']:
            self.util.print_message(FAIL, 'Invalid mode: {}'.format(mode))
            exit(1)

        # Gather reporting items.
        if mode == 'train':
            self.util.print_message(NOTE, 'Creating training report.')
            csv_file_list = glob.glob(os.path.join(self.report_train_path, '*.csv'))

            # Create DataFrame.
            content_list = []
            for file in csv_file_list:
                content_list.append(pd.read_csv(file, names=self.header, sep=','))
            df_csv = pd.concat(content_list).drop_duplicates().sort_values(by=['ip', 'port'],
                                                                           ascending=True).reset_index(drop=True,
                                                                                                       col_level=1)

            items = []
            for idx in range(len(df_csv)):
                items.append({'ip_addr': df_csv.loc[idx, 'ip'],
                              'port': df_csv.loc[idx, 'port'],
                              'prod_name': df_csv.loc[idx, 'service'],
                              'vuln_name': df_csv.loc[idx, 'vuln_name'],
                              'type': df_csv.loc[idx, 'type'],
                              'description': df_csv.loc[idx, 'description'],
                              'exploit': df_csv.loc[idx, 'exploit'],
                              'target': df_csv.loc[idx, 'target'],
                              'payload': df_csv.loc[idx, 'payload'],
                              'ref': str(df_csv.loc[idx, 'reference']).replace('@', '<br>')})

            try:
                # Setting template.
                env = Environment(loader=FileSystemLoader(self.report_train_path))
                template = env.get_template(self.template_train)
                pd.set_option('display.max_colwidth', -1)
                html = template.render({'title': 'Deep Exploit Scan Report', 'items': items})

                # Write report.
                with codecs.open(self.report_train_file, 'w', 'utf-8') as fout:
                    fout.write(html)
            except Exception as err:
                self.util.print_exception(err, 'Creating report error.')
            self.util.print_message(OK, 'Creating training report done.')
        else:
            self.util.print_message(NOTE, 'Creating testing report.')
            self.util.print_message(OK, 'Creating testing report done.')


# Define command option.
__doc__ = """{f}
Usage:
    {f} (-m <mode> | --mode <mode>)
    {f} -h | --help

Options:
    -m --mode     Require  : Creating mode "train/test".
    -h --help     Optional : Show this screen and exit.
""".format(f=__file__)


# Parse command arguments.
def command_parse():
    args = docopt(__doc__)
    return args['<mode>']


if __name__ == '__main__':
    # Get command arguments.
    mode = command_parse()

    # Create report.
    report = CreateReport()
    report.create_report(mode)
